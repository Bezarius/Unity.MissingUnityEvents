using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;

namespace Assets.MissingUnityEvents.Editor
{
    public class EventILWeaverCommandLineArgsGenerator
    {
        private const string MultipleItemsForArgCommandLineDelimiter = ";";

        public static string GenerateRevertToOriginalCommandLineArgs(MissingUnityEventsManagerConfiguration config)
        {
            return $"revert-to-original " +
                   $"-t \"{string.Join(MultipleItemsForArgCommandLineDelimiter, GetUnityRequiredDllPaths(config, false))}\"";

        }

        public static string GenerateAddEventsCommandLineArgs(MissingUnityEventsManagerConfiguration config)
        {
            return $"add-events " +
                   $"-t \"{string.Join(MultipleItemsForArgCommandLineDelimiter, GetUnityRequiredDllPaths(config, false))}\" " +
                   $"--target-definitions {string.Join(MultipleItemsForArgCommandLineDelimiter, config.EventConfigurationEntries.Select(c => $"{c.ObjectType}-{c.PropertyName}-{c.DllName}"))}";
        }

        public static string GenerateCreateHelperClassesArgs(MissingUnityEventsManagerConfiguration config)
        {
            return $"generate-helper-code " +
                   $"-t \"{string.Join(MultipleItemsForArgCommandLineDelimiter, GetUnityRequiredDllPaths(config, true))}\" " +
                   $"-o \"{config.HelperClassFilePath}\" " +
                   $"-n \"{config.HelperClassNamespace}\" " +
                   $"--using-statements System:UnityEngine " +
                   $"--enabled-build-symbol {MissingUnityEventsManagerConfiguration.CustomAutoGeneratedEventsEnabledBuildSymbol} " +
                   $"--include-custom-code-when-no-build-symbol \"{config.HelperClassIncludeCustomCodeWhenNoBuildSymbol.Replace("\"", "\\\"")}\"";
        }

        private static List<FileInfo> GetUnityRequiredDllPaths(MissingUnityEventsManagerConfiguration config, bool singlePerDllType)
        {
            var unityRequiredDllPaths = config.EventConfigurationEntries.Select(c => c.DllName).GroupBy(d => d).Select(g => g.First())
                .SelectMany(dllName =>
                    new DirectoryInfo(UnityEditorDataDirectoryPath)
                    .GetFiles(dllName + ".dll", SearchOption.AllDirectories)
                ).ToList();

            if (singlePerDllType)
            {
                unityRequiredDllPaths = unityRequiredDllPaths
                    .GroupBy(f => f.Name)
                    .Select(g => g.First())
                    .ToList();
            }

            return unityRequiredDllPaths;
        }

        private static string UnityEditorDataDirectoryPath => EditorApplication.applicationContentsPath;
    }
}
