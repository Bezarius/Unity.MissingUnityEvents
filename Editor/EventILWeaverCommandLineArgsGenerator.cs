using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;

namespace Assets.MissingUnityEvents.Editor
{
    public class EventILWeaverCommandLineArgsGenerator
    {
        private const string MultipleItemsForArgCommandLineDelimiter = ";";
        public const string UnityCoreModuleDllName = "UnityEngine.CoreModule.dll";

        public static string GenerateRevertToOriginalCommandLineArgs()
        {
            var unityCoreDllPaths = GetUnityCoreDllPaths();

            return $"revert-to-original " +
                   $"-t \"{string.Join(MultipleItemsForArgCommandLineDelimiter, unityCoreDllPaths)}\"";

        }

        public static string GenerateAddEventsCommandLineArgs(MissingUnityEventsManagerConfiguration config)
        {
            var unityCoreDllPaths = GetUnityCoreDllPaths();

            return $"add-events " +
                   $"-t \"{string.Join(MultipleItemsForArgCommandLineDelimiter, unityCoreDllPaths)}\" " +
                   $"--target-definitions {string.Join(MultipleItemsForArgCommandLineDelimiter, config.EventConfigurationEntries.Select(c => $"{c.ObjectType}-{c.PropertyName}"))}";
        }

        public static string GenerateCreateHelperClassesArgs(MissingUnityEventsManagerConfiguration config)
        {
            return $"generate-helper-code " +
                   $"-t \"{UnityCoreAssemblyPath}\" " +
                   $"-o \"{config.HelperClassFilePath}\" " +
                   $"-n \"{config.HelperClassNamespace}\" " +
                   $"--using-statements System:UnityEngine " +
                   $"--enabled-build-symbol {MissingUnityEventsManagerConfiguration.CustomAutoGeneratedEventsEnabledBuildSymbol} " +
                   $"--include-custom-code-when-no-build-symbol \"{config.HelperClassIncludeCustomCodeWhenNoBuildSymbol.Replace("\"", "\\\"")}\"";
        }

        private static List<FileInfo> GetUnityCoreDllPaths()
        {
            var unityCoreDllPaths = new DirectoryInfo(UnityEditorDataDirectoryPath)
                .GetFiles(UnityCoreModuleDllName, SearchOption.AllDirectories)
                .Where(p => p.FullName != UnityCoreAssemblyPath)
                .ToList();
            return unityCoreDllPaths;
        }

        private static string UnityCoreAssemblyPath => EditorApplication.applicationContentsPath + "/Managed/UnityEngine/" + UnityCoreModuleDllName;
        private static string UnityEditorDataDirectoryPath => EditorApplication.applicationContentsPath;
    }
}
